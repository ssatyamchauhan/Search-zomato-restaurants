{"version":3,"sources":["Components/zomato.js","App.js","serviceWorker.js","index.js"],"names":["Zomato","React","useState","data","responseStatus","state","setState","useEffect","axios","method","url","headers","then","response","Mainlist","simplelist","nearbyRest","nearby_restaurants","i","name","restaurant","average_cost_for_two","has_online_delivery","rating","user_rating","aggregate_rating","cuisines","split","rating_text","featured_image","location","locality","push","catch","error","getLocationLattitude","city","a","async","location_suggestions","longitude","latitude","console","log","JSX","map","rest","ind","className","key","src","alt","slice","type","placeholder","onKeyPress","event","target","value","lati","long","Err","App","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06ada53a.chunk.js","sourcesContent":["import React from 'react';\n// import { location } from './zomatoapi'\nimport axios from 'axios';\nimport './zomato.css'\n\nexport default function Zomato() {\n\n    const [state, setState] = React.useState({\n        data: [],\n        responseStatus: ''\n    })\n\n\n    React.useEffect(() => {\n        axios({\n            method: \"GET\",\n            url: \"https://developers.zomato.com/api/v2.1/geocode?lat=28.57005&lon=77.32317\",\n            headers: {\n                \"user-key\": \"ff4f897b8bc0d97ccd3ed25a6b951fd3\",\n                \"content-type\": \"application/json\"\n            }\n        })\n            .then(response => {\n                let Mainlist = []\n                let simplelist = {}\n                let nearbyRest = response.data.nearby_restaurants;\n                for (var i of nearbyRest) {\n                    simplelist.name = (i.restaurant.name)\n                    simplelist.average_cost_for_two = (i.restaurant.average_cost_for_two)\n                    simplelist.has_online_delivery = (i.restaurant.has_online_delivery) ? \"Available\" : \"Not Available\"\n                    simplelist.rating = (i.restaurant.user_rating.aggregate_rating)\n                    simplelist.cuisines = (i.restaurant.cuisines).split(',')\n                    simplelist.rating_text = (i.restaurant.user_rating.rating_text)\n                    simplelist.featured_image = i.restaurant.featured_image\n                    simplelist.location = i.restaurant.location.locality\n                    Mainlist.push(simplelist)\n                    simplelist = {}\n                }\n                setState({\n                    ...state,\n                    data: Mainlist,\n                    responseStatus: 'Here is the list of Zomato-Restaurants based on your location'\n                })\n            })\n            .catch(error => {\n                setState({ ...state, responseStatus: \"You have not enetered the correct location, please Enter the correct location\" })\n            });\n    }, [])\n\n    let getLocationLattitude = async (city) => {\n        return axios({\n            method: \"GET\",\n            url: `https://developers.zomato.com/api/v2.1/locations?query=${city}`,\n            headers: {\n                \"user-key\": \"ff4f897b8bc0d97ccd3ed25a6b951fd3\",\n                \"content-type\": \"application/json\"\n            }\n        })\n            .then(response => {\n                let long = response.data.location_suggestions[0].longitude;\n                let lati = response.data.location_suggestions[0].latitude;\n                // console.log(long,lati)\n                return (\n                    {\n                        \"long\": long,\n                        \"lati\": lati\n                    }\n                );\n\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n    let searchRestaurant = async (event) => {\n\n        if (event.key === 'Enter') {\n\n            await getLocationLattitude(event.target.value)\n                .then(response => {\n\n                    axios({\n                        method: \"GET\",\n                        url: `https://developers.zomato.com/api/v2.1/geocode?lat=${response.lati}&lon=${response.long}`,\n                        headers: {\n                            \"user-key\": \"ff4f897b8bc0d97ccd3ed25a6b951fd3\",\n                            \"content-type\": \"application/json\"\n                        }\n                    })\n                        .then(response => {\n                            let Mainlist = []\n                            let simplelist = {}\n                            let nearbyRest = response.data.nearby_restaurants;\n                            for (var i of nearbyRest) {\n                                simplelist.name = (i.restaurant.name)\n                                simplelist.average_cost_for_two = (i.restaurant.average_cost_for_two)\n                                simplelist.has_online_delivery = (i.restaurant.has_online_delivery) ? \"Available\" : \"Not Available\"\n                                simplelist.rating = (i.restaurant.user_rating.aggregate_rating)\n                                simplelist.cuisines = (i.restaurant.cuisines).split(',')\n                                simplelist.rating_text = (i.restaurant.user_rating.rating_text)\n                                simplelist.featured_image = i.restaurant.featured_image\n                                simplelist.location = i.restaurant.location.locality\n                                Mainlist.push(simplelist)\n                                simplelist = {}\n                            }\n                            setState({\n                                ...state,\n                                data: Mainlist,\n                                responseStatus: 'Here is the list of Zomato-Restaurants based on your location'\n                            })\n                        })\n                        .catch(error => {\n                            console.log(error);\n                        });\n                })\n                .catch(Err => setState({ ...state, responseStatus: \"You have not enetered the correct location, please Enter the correct location\" }))\n        }\n    }\n\n\n    let JSX = state.data.map((rest, ind) => {\n        return (\n            <div className=\"Card\" key={ind}>\n                <div className=\"content\">\n                    <div>\n                        <article>\n                            <div className=\"first-div\">\n                                <div className=\"img\">\n                                    <img src={rest.featured_image} alt=\"Low Internet Connectivity\" />\n                                </div>\n                                <div className=\"img-details\">\n                                    <div className=\"details\">\n                                        <div className=\"restaurant-name\">\n                                            <h3>{rest.name}</h3>\n                                        </div>\n                                        <div className=\"restaurnat-place\">{rest.location}</div>\n                                    </div>\n                                    <div className=\"ratings\">\n                                        <span>Ratings</span>\n                                        <div className=\"ratings\">{rest.rating}</div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"divider div-transparent\"></div>\n                            <div className=\"text\">\n                                <div className=\"Row\">\n                                    <span>CUISINES:</span>\n                                    <span>{rest.cuisines.slice(0, 4)}</span>\n                                </div>\n                                <div className=\"Row\">\n                                    <span>COST FOR TWO:</span>\n                                    <span>{rest.average_cost_for_two}</span>\n                                </div>\n                                <div className=\"Row\">\n                                    <span>ONLINE_DELIVERY:</span>\n                                    <span>{rest.has_online_delivery}</span>\n                                </div>\n                                <div className=\"Row\">\n                                    <span>Rating Text:</span>\n                                    <span>{rest.rating_text}</span>\n                                </div>\n                            </div>\n                        </article>\n                    </div>\n                </div>\n            </div>\n        )\n    })\n\n\n    return (\n        <div>\n            <input className=\"inputCard\" type=\"text\" placeholder=\"Noida\" onKeyPress={searchRestaurant} />\n            <div className=\"inputCards\">{state.responseStatus} </div>\n            {JSX}\n        </div>\n    )\n\n}\n","import React from 'react';\nimport Zomato from './Components/zomato';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" component={Zomato} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}